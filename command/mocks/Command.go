// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Command is an autogenerated mock type for the Command type
type Command struct {
	mock.Mock
}

// Command provides a mock function with given fields: cmd, p
func (_m *Command) Command(cmd string, p string) error {
	ret := _m.Called(cmd, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(cmd, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fatal provides a mock function with given fields: _a0
func (_m *Command) Fatal(_a0 ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...interface{}) string); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetFourKeyPath provides a mock function with given fields:
func (_m *Command) GetFourKeyPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRepositoriesPath provides a mock function with given fields: cloneDir
func (_m *Command) GetRepositoriesPath(cloneDir string) string {
	ret := _m.Called(cloneDir)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(cloneDir)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Good provides a mock function with given fields: _a0
func (_m *Command) Good(_a0 ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...interface{}) string); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Info provides a mock function with given fields: _a0
func (_m *Command) Info(_a0 ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...interface{}) string); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Open provides a mock function with given fields: path
func (_m *Command) Open(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Warn provides a mock function with given fields: _a0
func (_m *Command) Warn(_a0 ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...interface{}) string); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
